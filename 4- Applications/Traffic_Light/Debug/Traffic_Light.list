
Traffic_Light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f54  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080010e8  080010f0  000110f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080010e8  080010e8  000110f0  2**0
                  CONTENTS
  4 .ARM          00000000  080010e8  080010e8  000110f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010e8  080010f0  000110f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010e8  080010e8  000110e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010ec  080010ec  000110ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000110f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000000  080010f0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  080010f0  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000110f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001d22  00000000  00000000  00011120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000884  00000000  00000000  00012e42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002a0  00000000  00000000  000136c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000218  00000000  00000000  00013968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000132e  00000000  00000000  00013b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000021d3  00000000  00000000  00014eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e8c5  00000000  00000000  00017081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00095946  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000860  00000000  00000000  00095998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080010d0 	.word	0x080010d0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080010d0 	.word	0x080010d0

080001d4 <MEXTI_voidEnableExternalInterrupt>:

static void(*MEXTI_PF[16])(void)= {NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};



void MEXTI_voidEnableExternalInterrupt(u8 copy_u8InterruptNumber){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
	SET_BIT(EXTI->IMR , copy_u8InterruptNumber);
 80001de:	4b08      	ldr	r3, [pc, #32]	; (8000200 <MEXTI_voidEnableExternalInterrupt+0x2c>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	79fa      	ldrb	r2, [r7, #7]
 80001e4:	2101      	movs	r1, #1
 80001e6:	fa01 f202 	lsl.w	r2, r1, r2
 80001ea:	4611      	mov	r1, r2
 80001ec:	4a04      	ldr	r2, [pc, #16]	; (8000200 <MEXTI_voidEnableExternalInterrupt+0x2c>)
 80001ee:	430b      	orrs	r3, r1
 80001f0:	6013      	str	r3, [r2, #0]
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	40013c00 	.word	0x40013c00

08000204 <MEXTI_voidTriggerSelect>:

void MEXTI_voidSoftwareInterrupt(u8 copy_u8InterruptNumber){
	SET_BIT(EXTI->SWIER , copy_u8InterruptNumber);
}

void MEXTI_voidTriggerSelect(EXTI_Lines_t copy_enumLine , u8 copy_u8SelectedTrigger){
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	460a      	mov	r2, r1
 800020e:	71fb      	strb	r3, [r7, #7]
 8000210:	4613      	mov	r3, r2
 8000212:	71bb      	strb	r3, [r7, #6]
	switch(copy_u8SelectedTrigger){
 8000214:	79bb      	ldrb	r3, [r7, #6]
 8000216:	2b03      	cmp	r3, #3
 8000218:	d01c      	beq.n	8000254 <MEXTI_voidTriggerSelect+0x50>
 800021a:	2b03      	cmp	r3, #3
 800021c:	dc2f      	bgt.n	800027e <MEXTI_voidTriggerSelect+0x7a>
 800021e:	2b01      	cmp	r3, #1
 8000220:	d002      	beq.n	8000228 <MEXTI_voidTriggerSelect+0x24>
 8000222:	2b02      	cmp	r3, #2
 8000224:	d00b      	beq.n	800023e <MEXTI_voidTriggerSelect+0x3a>
			SET_BIT(EXTI->RTSR , copy_enumLine);
			SET_BIT(EXTI->FTSR , copy_enumLine);
			break;
		}
	}
}
 8000226:	e02a      	b.n	800027e <MEXTI_voidTriggerSelect+0x7a>
		case EXTI_RISING_EDGE  : SET_BIT(EXTI->RTSR , copy_enumLine);  break;
 8000228:	4b18      	ldr	r3, [pc, #96]	; (800028c <MEXTI_voidTriggerSelect+0x88>)
 800022a:	689b      	ldr	r3, [r3, #8]
 800022c:	79fa      	ldrb	r2, [r7, #7]
 800022e:	2101      	movs	r1, #1
 8000230:	fa01 f202 	lsl.w	r2, r1, r2
 8000234:	4611      	mov	r1, r2
 8000236:	4a15      	ldr	r2, [pc, #84]	; (800028c <MEXTI_voidTriggerSelect+0x88>)
 8000238:	430b      	orrs	r3, r1
 800023a:	6093      	str	r3, [r2, #8]
 800023c:	e01f      	b.n	800027e <MEXTI_voidTriggerSelect+0x7a>
			SET_BIT(EXTI->FTSR , copy_enumLine);
 800023e:	4b13      	ldr	r3, [pc, #76]	; (800028c <MEXTI_voidTriggerSelect+0x88>)
 8000240:	68db      	ldr	r3, [r3, #12]
 8000242:	79fa      	ldrb	r2, [r7, #7]
 8000244:	2101      	movs	r1, #1
 8000246:	fa01 f202 	lsl.w	r2, r1, r2
 800024a:	4611      	mov	r1, r2
 800024c:	4a0f      	ldr	r2, [pc, #60]	; (800028c <MEXTI_voidTriggerSelect+0x88>)
 800024e:	430b      	orrs	r3, r1
 8000250:	60d3      	str	r3, [r2, #12]
			break;
 8000252:	e014      	b.n	800027e <MEXTI_voidTriggerSelect+0x7a>
			SET_BIT(EXTI->RTSR , copy_enumLine);
 8000254:	4b0d      	ldr	r3, [pc, #52]	; (800028c <MEXTI_voidTriggerSelect+0x88>)
 8000256:	689b      	ldr	r3, [r3, #8]
 8000258:	79fa      	ldrb	r2, [r7, #7]
 800025a:	2101      	movs	r1, #1
 800025c:	fa01 f202 	lsl.w	r2, r1, r2
 8000260:	4611      	mov	r1, r2
 8000262:	4a0a      	ldr	r2, [pc, #40]	; (800028c <MEXTI_voidTriggerSelect+0x88>)
 8000264:	430b      	orrs	r3, r1
 8000266:	6093      	str	r3, [r2, #8]
			SET_BIT(EXTI->FTSR , copy_enumLine);
 8000268:	4b08      	ldr	r3, [pc, #32]	; (800028c <MEXTI_voidTriggerSelect+0x88>)
 800026a:	68db      	ldr	r3, [r3, #12]
 800026c:	79fa      	ldrb	r2, [r7, #7]
 800026e:	2101      	movs	r1, #1
 8000270:	fa01 f202 	lsl.w	r2, r1, r2
 8000274:	4611      	mov	r1, r2
 8000276:	4a05      	ldr	r2, [pc, #20]	; (800028c <MEXTI_voidTriggerSelect+0x88>)
 8000278:	430b      	orrs	r3, r1
 800027a:	60d3      	str	r3, [r2, #12]
			break;
 800027c:	bf00      	nop
}
 800027e:	bf00      	nop
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	40013c00 	.word	0x40013c00

08000290 <MEXTI_voidSetEXTIConfig>:

void MEXTI_voidSetEXTIConfig (EXTI_Lines_t copy_enumLine , EXTI_Ports_t copy_enumPort){
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	460a      	mov	r2, r1
 800029a:	71fb      	strb	r3, [r7, #7]
 800029c:	4613      	mov	r3, r2
 800029e:	71bb      	strb	r3, [r7, #6]
	switch (copy_enumLine){
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	2b0f      	cmp	r3, #15
 80002a4:	f200 810c 	bhi.w	80004c0 <MEXTI_voidSetEXTIConfig+0x230>
 80002a8:	a201      	add	r2, pc, #4	; (adr r2, 80002b0 <MEXTI_voidSetEXTIConfig+0x20>)
 80002aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ae:	bf00      	nop
 80002b0:	080002f1 	.word	0x080002f1
 80002b4:	0800030b 	.word	0x0800030b
 80002b8:	08000329 	.word	0x08000329
 80002bc:	08000347 	.word	0x08000347
 80002c0:	08000365 	.word	0x08000365
 80002c4:	0800037f 	.word	0x0800037f
 80002c8:	0800039d 	.word	0x0800039d
 80002cc:	080003bb 	.word	0x080003bb
 80002d0:	080003d9 	.word	0x080003d9
 80002d4:	080003f3 	.word	0x080003f3
 80002d8:	08000411 	.word	0x08000411
 80002dc:	0800042f 	.word	0x0800042f
 80002e0:	0800044d 	.word	0x0800044d
 80002e4:	08000467 	.word	0x08000467
 80002e8:	08000485 	.word	0x08000485
 80002ec:	080004a3 	.word	0x080004a3
		case EXTI_LINE0  : SYSCFG->EXTICR1 &= ~(CONFIG_MASKING)     ; SYSCFG->EXTICR1 |= (copy_enumPort)     ; break;
 80002f0:	4b76      	ldr	r3, [pc, #472]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	4a75      	ldr	r2, [pc, #468]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 80002f6:	f023 030f 	bic.w	r3, r3, #15
 80002fa:	6093      	str	r3, [r2, #8]
 80002fc:	4b73      	ldr	r3, [pc, #460]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 80002fe:	689a      	ldr	r2, [r3, #8]
 8000300:	79bb      	ldrb	r3, [r7, #6]
 8000302:	4972      	ldr	r1, [pc, #456]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 8000304:	4313      	orrs	r3, r2
 8000306:	608b      	str	r3, [r1, #8]
 8000308:	e0da      	b.n	80004c0 <MEXTI_voidSetEXTIConfig+0x230>
		case EXTI_LINE1  : SYSCFG->EXTICR1 &= ~(CONFIG_MASKING<<4)  ; SYSCFG->EXTICR1 |= (copy_enumPort<<4)  ;break;
 800030a:	4b70      	ldr	r3, [pc, #448]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	4a6f      	ldr	r2, [pc, #444]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 8000310:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000314:	6093      	str	r3, [r2, #8]
 8000316:	4b6d      	ldr	r3, [pc, #436]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 8000318:	689b      	ldr	r3, [r3, #8]
 800031a:	79ba      	ldrb	r2, [r7, #6]
 800031c:	0112      	lsls	r2, r2, #4
 800031e:	4611      	mov	r1, r2
 8000320:	4a6a      	ldr	r2, [pc, #424]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 8000322:	430b      	orrs	r3, r1
 8000324:	6093      	str	r3, [r2, #8]
 8000326:	e0cb      	b.n	80004c0 <MEXTI_voidSetEXTIConfig+0x230>
		case EXTI_LINE2  : SYSCFG->EXTICR1 &= ~(CONFIG_MASKING<<8)  ; SYSCFG->EXTICR1 |= (copy_enumPort<<8)  ; break;
 8000328:	4b68      	ldr	r3, [pc, #416]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	4a67      	ldr	r2, [pc, #412]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 800032e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000332:	6093      	str	r3, [r2, #8]
 8000334:	4b65      	ldr	r3, [pc, #404]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	79ba      	ldrb	r2, [r7, #6]
 800033a:	0212      	lsls	r2, r2, #8
 800033c:	4611      	mov	r1, r2
 800033e:	4a63      	ldr	r2, [pc, #396]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 8000340:	430b      	orrs	r3, r1
 8000342:	6093      	str	r3, [r2, #8]
 8000344:	e0bc      	b.n	80004c0 <MEXTI_voidSetEXTIConfig+0x230>
		case EXTI_LINE3  : SYSCFG->EXTICR1 &= ~(CONFIG_MASKING<<12) ; SYSCFG->EXTICR1 |= (copy_enumPort<<12) ; break;
 8000346:	4b61      	ldr	r3, [pc, #388]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 8000348:	689b      	ldr	r3, [r3, #8]
 800034a:	4a60      	ldr	r2, [pc, #384]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 800034c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000350:	6093      	str	r3, [r2, #8]
 8000352:	4b5e      	ldr	r3, [pc, #376]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 8000354:	689b      	ldr	r3, [r3, #8]
 8000356:	79ba      	ldrb	r2, [r7, #6]
 8000358:	0312      	lsls	r2, r2, #12
 800035a:	4611      	mov	r1, r2
 800035c:	4a5b      	ldr	r2, [pc, #364]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 800035e:	430b      	orrs	r3, r1
 8000360:	6093      	str	r3, [r2, #8]
 8000362:	e0ad      	b.n	80004c0 <MEXTI_voidSetEXTIConfig+0x230>
		case EXTI_LINE4  : SYSCFG->EXTICR2 &= ~(CONFIG_MASKING)     ; SYSCFG->EXTICR2 |= (copy_enumPort)     ; break;
 8000364:	4b59      	ldr	r3, [pc, #356]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	4a58      	ldr	r2, [pc, #352]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 800036a:	f023 030f 	bic.w	r3, r3, #15
 800036e:	60d3      	str	r3, [r2, #12]
 8000370:	4b56      	ldr	r3, [pc, #344]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 8000372:	68da      	ldr	r2, [r3, #12]
 8000374:	79bb      	ldrb	r3, [r7, #6]
 8000376:	4955      	ldr	r1, [pc, #340]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 8000378:	4313      	orrs	r3, r2
 800037a:	60cb      	str	r3, [r1, #12]
 800037c:	e0a0      	b.n	80004c0 <MEXTI_voidSetEXTIConfig+0x230>
		case EXTI_LINE5  : SYSCFG->EXTICR2 &= ~(CONFIG_MASKING<<4)  ; SYSCFG->EXTICR2 |= (copy_enumPort<<4)  ; break;
 800037e:	4b53      	ldr	r3, [pc, #332]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 8000380:	68db      	ldr	r3, [r3, #12]
 8000382:	4a52      	ldr	r2, [pc, #328]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 8000384:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000388:	60d3      	str	r3, [r2, #12]
 800038a:	4b50      	ldr	r3, [pc, #320]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 800038c:	68db      	ldr	r3, [r3, #12]
 800038e:	79ba      	ldrb	r2, [r7, #6]
 8000390:	0112      	lsls	r2, r2, #4
 8000392:	4611      	mov	r1, r2
 8000394:	4a4d      	ldr	r2, [pc, #308]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 8000396:	430b      	orrs	r3, r1
 8000398:	60d3      	str	r3, [r2, #12]
 800039a:	e091      	b.n	80004c0 <MEXTI_voidSetEXTIConfig+0x230>
		case EXTI_LINE6  : SYSCFG->EXTICR2 &= ~(CONFIG_MASKING<<8)  ; SYSCFG->EXTICR2 |= (copy_enumPort<<8)  ; break;
 800039c:	4b4b      	ldr	r3, [pc, #300]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 800039e:	68db      	ldr	r3, [r3, #12]
 80003a0:	4a4a      	ldr	r2, [pc, #296]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 80003a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80003a6:	60d3      	str	r3, [r2, #12]
 80003a8:	4b48      	ldr	r3, [pc, #288]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	79ba      	ldrb	r2, [r7, #6]
 80003ae:	0212      	lsls	r2, r2, #8
 80003b0:	4611      	mov	r1, r2
 80003b2:	4a46      	ldr	r2, [pc, #280]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 80003b4:	430b      	orrs	r3, r1
 80003b6:	60d3      	str	r3, [r2, #12]
 80003b8:	e082      	b.n	80004c0 <MEXTI_voidSetEXTIConfig+0x230>
		case EXTI_LINE7  : SYSCFG->EXTICR2 &= ~(CONFIG_MASKING<<12) ; SYSCFG->EXTICR2 |= (copy_enumPort<<12) ; break;
 80003ba:	4b44      	ldr	r3, [pc, #272]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 80003bc:	68db      	ldr	r3, [r3, #12]
 80003be:	4a43      	ldr	r2, [pc, #268]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 80003c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80003c4:	60d3      	str	r3, [r2, #12]
 80003c6:	4b41      	ldr	r3, [pc, #260]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 80003c8:	68db      	ldr	r3, [r3, #12]
 80003ca:	79ba      	ldrb	r2, [r7, #6]
 80003cc:	0312      	lsls	r2, r2, #12
 80003ce:	4611      	mov	r1, r2
 80003d0:	4a3e      	ldr	r2, [pc, #248]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 80003d2:	430b      	orrs	r3, r1
 80003d4:	60d3      	str	r3, [r2, #12]
 80003d6:	e073      	b.n	80004c0 <MEXTI_voidSetEXTIConfig+0x230>
		case EXTI_LINE8  : SYSCFG->EXTICR3 &= ~(CONFIG_MASKING)     ; SYSCFG->EXTICR3 |= (copy_enumPort)     ; break;
 80003d8:	4b3c      	ldr	r3, [pc, #240]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 80003da:	691b      	ldr	r3, [r3, #16]
 80003dc:	4a3b      	ldr	r2, [pc, #236]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 80003de:	f023 030f 	bic.w	r3, r3, #15
 80003e2:	6113      	str	r3, [r2, #16]
 80003e4:	4b39      	ldr	r3, [pc, #228]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 80003e6:	691a      	ldr	r2, [r3, #16]
 80003e8:	79bb      	ldrb	r3, [r7, #6]
 80003ea:	4938      	ldr	r1, [pc, #224]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 80003ec:	4313      	orrs	r3, r2
 80003ee:	610b      	str	r3, [r1, #16]
 80003f0:	e066      	b.n	80004c0 <MEXTI_voidSetEXTIConfig+0x230>
		case EXTI_LINE9  : SYSCFG->EXTICR3 &= ~(CONFIG_MASKING<<4)  ; SYSCFG->EXTICR3 |= (copy_enumPort<<4)  ; break;
 80003f2:	4b36      	ldr	r3, [pc, #216]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 80003f4:	691b      	ldr	r3, [r3, #16]
 80003f6:	4a35      	ldr	r2, [pc, #212]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 80003f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80003fc:	6113      	str	r3, [r2, #16]
 80003fe:	4b33      	ldr	r3, [pc, #204]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 8000400:	691b      	ldr	r3, [r3, #16]
 8000402:	79ba      	ldrb	r2, [r7, #6]
 8000404:	0112      	lsls	r2, r2, #4
 8000406:	4611      	mov	r1, r2
 8000408:	4a30      	ldr	r2, [pc, #192]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 800040a:	430b      	orrs	r3, r1
 800040c:	6113      	str	r3, [r2, #16]
 800040e:	e057      	b.n	80004c0 <MEXTI_voidSetEXTIConfig+0x230>
		case EXTI_LINE10 : SYSCFG->EXTICR3 &= ~(CONFIG_MASKING<<8)  ; SYSCFG->EXTICR3 |= (copy_enumPort<<8)  ; break;
 8000410:	4b2e      	ldr	r3, [pc, #184]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 8000412:	691b      	ldr	r3, [r3, #16]
 8000414:	4a2d      	ldr	r2, [pc, #180]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 8000416:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800041a:	6113      	str	r3, [r2, #16]
 800041c:	4b2b      	ldr	r3, [pc, #172]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 800041e:	691b      	ldr	r3, [r3, #16]
 8000420:	79ba      	ldrb	r2, [r7, #6]
 8000422:	0212      	lsls	r2, r2, #8
 8000424:	4611      	mov	r1, r2
 8000426:	4a29      	ldr	r2, [pc, #164]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 8000428:	430b      	orrs	r3, r1
 800042a:	6113      	str	r3, [r2, #16]
 800042c:	e048      	b.n	80004c0 <MEXTI_voidSetEXTIConfig+0x230>
		case EXTI_LINE11 : SYSCFG->EXTICR3 &= ~(CONFIG_MASKING<<12) ; SYSCFG->EXTICR3 |= (copy_enumPort<<12) ; break;
 800042e:	4b27      	ldr	r3, [pc, #156]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 8000430:	691b      	ldr	r3, [r3, #16]
 8000432:	4a26      	ldr	r2, [pc, #152]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 8000434:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000438:	6113      	str	r3, [r2, #16]
 800043a:	4b24      	ldr	r3, [pc, #144]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 800043c:	691b      	ldr	r3, [r3, #16]
 800043e:	79ba      	ldrb	r2, [r7, #6]
 8000440:	0312      	lsls	r2, r2, #12
 8000442:	4611      	mov	r1, r2
 8000444:	4a21      	ldr	r2, [pc, #132]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 8000446:	430b      	orrs	r3, r1
 8000448:	6113      	str	r3, [r2, #16]
 800044a:	e039      	b.n	80004c0 <MEXTI_voidSetEXTIConfig+0x230>
		case EXTI_LINE12 : SYSCFG->EXTICR4 &= ~(CONFIG_MASKING)     ; SYSCFG->EXTICR4 |= (copy_enumPort)     ; break;
 800044c:	4b1f      	ldr	r3, [pc, #124]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	4a1e      	ldr	r2, [pc, #120]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 8000452:	f023 030f 	bic.w	r3, r3, #15
 8000456:	6153      	str	r3, [r2, #20]
 8000458:	4b1c      	ldr	r3, [pc, #112]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 800045a:	695a      	ldr	r2, [r3, #20]
 800045c:	79bb      	ldrb	r3, [r7, #6]
 800045e:	491b      	ldr	r1, [pc, #108]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 8000460:	4313      	orrs	r3, r2
 8000462:	614b      	str	r3, [r1, #20]
 8000464:	e02c      	b.n	80004c0 <MEXTI_voidSetEXTIConfig+0x230>
		case EXTI_LINE13 : SYSCFG->EXTICR4 &= ~(CONFIG_MASKING<<4)  ; SYSCFG->EXTICR4 |= (copy_enumPort<<4)  ; break;
 8000466:	4b19      	ldr	r3, [pc, #100]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a18      	ldr	r2, [pc, #96]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 800046c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000470:	6153      	str	r3, [r2, #20]
 8000472:	4b16      	ldr	r3, [pc, #88]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	79ba      	ldrb	r2, [r7, #6]
 8000478:	0112      	lsls	r2, r2, #4
 800047a:	4611      	mov	r1, r2
 800047c:	4a13      	ldr	r2, [pc, #76]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 800047e:	430b      	orrs	r3, r1
 8000480:	6153      	str	r3, [r2, #20]
 8000482:	e01d      	b.n	80004c0 <MEXTI_voidSetEXTIConfig+0x230>
		case EXTI_LINE14 : SYSCFG->EXTICR4 &= ~(CONFIG_MASKING<<8)  ; SYSCFG->EXTICR4 |= (copy_enumPort<<8)  ; break;
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	4a10      	ldr	r2, [pc, #64]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 800048a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800048e:	6153      	str	r3, [r2, #20]
 8000490:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	79ba      	ldrb	r2, [r7, #6]
 8000496:	0212      	lsls	r2, r2, #8
 8000498:	4611      	mov	r1, r2
 800049a:	4a0c      	ldr	r2, [pc, #48]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 800049c:	430b      	orrs	r3, r1
 800049e:	6153      	str	r3, [r2, #20]
 80004a0:	e00e      	b.n	80004c0 <MEXTI_voidSetEXTIConfig+0x230>
		case EXTI_LINE15 : SYSCFG->EXTICR4 &= ~(CONFIG_MASKING<<12) ; SYSCFG->EXTICR4 |= (copy_enumPort<<12) ; break;
 80004a2:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a09      	ldr	r2, [pc, #36]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 80004a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b07      	ldr	r3, [pc, #28]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	79ba      	ldrb	r2, [r7, #6]
 80004b4:	0312      	lsls	r2, r2, #12
 80004b6:	4611      	mov	r1, r2
 80004b8:	4a04      	ldr	r2, [pc, #16]	; (80004cc <MEXTI_voidSetEXTIConfig+0x23c>)
 80004ba:	430b      	orrs	r3, r1
 80004bc:	6153      	str	r3, [r2, #20]
 80004be:	bf00      	nop
		}
}
 80004c0:	bf00      	nop
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	40013800 	.word	0x40013800

080004d0 <MEXTI_u8EXTISetCallBack>:


u8 MEXTI_u8EXTISetCallBack(u8 Copy_u8EXTINum,void(*Copy_Pf)(void)){
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	6039      	str	r1, [r7, #0]
 80004da:	71fb      	strb	r3, [r7, #7]
	u8 local_u8Error = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	73fb      	strb	r3, [r7, #15]
	if(Copy_Pf != NULL && Copy_u8EXTINum <= 15){
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d009      	beq.n	80004fa <MEXTI_u8EXTISetCallBack+0x2a>
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	2b0f      	cmp	r3, #15
 80004ea:	d806      	bhi.n	80004fa <MEXTI_u8EXTISetCallBack+0x2a>
		local_u8Error = 1;
 80004ec:	2301      	movs	r3, #1
 80004ee:	73fb      	strb	r3, [r7, #15]
		MEXTI_PF[Copy_u8EXTINum] = Copy_Pf;
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	4905      	ldr	r1, [pc, #20]	; (8000508 <MEXTI_u8EXTISetCallBack+0x38>)
 80004f4:	683a      	ldr	r2, [r7, #0]
 80004f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
	return local_u8Error;
 80004fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	3714      	adds	r7, #20
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	2000001c 	.word	0x2000001c

0800050c <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void){
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	if(MEXTI_PF[EXTI_LINE0] != NULL){
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <EXTI0_IRQHandler+0x24>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d008      	beq.n	800052a <EXTI0_IRQHandler+0x1e>
		/*excute the function*/
		MEXTI_PF[EXTI_LINE0]();
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <EXTI0_IRQHandler+0x24>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4798      	blx	r3
		/*clear the flag*/
		SET_BIT(EXTI->PR , EXTI_LINE0);
 800051e:	4b05      	ldr	r3, [pc, #20]	; (8000534 <EXTI0_IRQHandler+0x28>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a04      	ldr	r2, [pc, #16]	; (8000534 <EXTI0_IRQHandler+0x28>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	6153      	str	r3, [r2, #20]
	}
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	2000001c 	.word	0x2000001c
 8000534:	40013c00 	.word	0x40013c00

08000538 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void){
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	if(MEXTI_PF[EXTI_LINE1] != NULL){
 800053c:	4b07      	ldr	r3, [pc, #28]	; (800055c <EXTI1_IRQHandler+0x24>)
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d008      	beq.n	8000556 <EXTI1_IRQHandler+0x1e>
		/*excute the function*/
		MEXTI_PF[EXTI_LINE1]();
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <EXTI1_IRQHandler+0x24>)
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	4798      	blx	r3
		/*clear the flag*/
		SET_BIT(EXTI->PR , EXTI_LINE1);
 800054a:	4b05      	ldr	r3, [pc, #20]	; (8000560 <EXTI1_IRQHandler+0x28>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	4a04      	ldr	r2, [pc, #16]	; (8000560 <EXTI1_IRQHandler+0x28>)
 8000550:	f043 0302 	orr.w	r3, r3, #2
 8000554:	6153      	str	r3, [r2, #20]
	}
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	2000001c 	.word	0x2000001c
 8000560:	40013c00 	.word	0x40013c00

08000564 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void){
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	if(MEXTI_PF[EXTI_LINE2] != NULL){
 8000568:	4b07      	ldr	r3, [pc, #28]	; (8000588 <EXTI2_IRQHandler+0x24>)
 800056a:	689b      	ldr	r3, [r3, #8]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d008      	beq.n	8000582 <EXTI2_IRQHandler+0x1e>
		/*excute the function*/
		MEXTI_PF[EXTI_LINE2]();
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <EXTI2_IRQHandler+0x24>)
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	4798      	blx	r3
		/*clear the flag*/
		SET_BIT(EXTI->PR , EXTI_LINE2);
 8000576:	4b05      	ldr	r3, [pc, #20]	; (800058c <EXTI2_IRQHandler+0x28>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a04      	ldr	r2, [pc, #16]	; (800058c <EXTI2_IRQHandler+0x28>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	6153      	str	r3, [r2, #20]
	}
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	2000001c 	.word	0x2000001c
 800058c:	40013c00 	.word	0x40013c00

08000590 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	if(MEXTI_PF[EXTI_LINE3] != NULL){
 8000594:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <EXTI3_IRQHandler+0x24>)
 8000596:	68db      	ldr	r3, [r3, #12]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d008      	beq.n	80005ae <EXTI3_IRQHandler+0x1e>
		/*excute the function*/
		MEXTI_PF[EXTI_LINE3]();
 800059c:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <EXTI3_IRQHandler+0x24>)
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	4798      	blx	r3
		/*clear the flag*/
		SET_BIT(EXTI->PR , EXTI_LINE3);
 80005a2:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <EXTI3_IRQHandler+0x28>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <EXTI3_IRQHandler+0x28>)
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	6153      	str	r3, [r2, #20]
	}
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	2000001c 	.word	0x2000001c
 80005b8:	40013c00 	.word	0x40013c00

080005bc <EXTI4_IRQHandler>:


void EXTI4_IRQHandler(void){
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	if(MEXTI_PF[EXTI_LINE4] != NULL){
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <EXTI4_IRQHandler+0x24>)
 80005c2:	691b      	ldr	r3, [r3, #16]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d008      	beq.n	80005da <EXTI4_IRQHandler+0x1e>
		/*excute the function*/
		MEXTI_PF[EXTI_LINE4]();
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <EXTI4_IRQHandler+0x24>)
 80005ca:	691b      	ldr	r3, [r3, #16]
 80005cc:	4798      	blx	r3
		/*clear the flag*/
		SET_BIT(EXTI->PR , EXTI_LINE4);
 80005ce:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <EXTI4_IRQHandler+0x28>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	4a04      	ldr	r2, [pc, #16]	; (80005e4 <EXTI4_IRQHandler+0x28>)
 80005d4:	f043 0310 	orr.w	r3, r3, #16
 80005d8:	6153      	str	r3, [r2, #20]
	}
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	2000001c 	.word	0x2000001c
 80005e4:	40013c00 	.word	0x40013c00

080005e8 <MGPIO_voidSetPinMode>:

/***********************************Start Function*********************************************/



void MGPIO_voidSetPinMode(u8 copy_u8PortId , u8 copy_u8PinNumber , u8 copy_u8Mode){
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
 80005f2:	460b      	mov	r3, r1
 80005f4:	71bb      	strb	r3, [r7, #6]
 80005f6:	4613      	mov	r3, r2
 80005f8:	717b      	strb	r3, [r7, #5]
	switch(copy_u8PortId){
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b05      	cmp	r3, #5
 80005fe:	f200 809f 	bhi.w	8000740 <MGPIO_voidSetPinMode+0x158>
 8000602:	a201      	add	r2, pc, #4	; (adr r2, 8000608 <MGPIO_voidSetPinMode+0x20>)
 8000604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000608:	08000621 	.word	0x08000621
 800060c:	08000651 	.word	0x08000651
 8000610:	08000681 	.word	0x08000681
 8000614:	080006b1 	.word	0x080006b1
 8000618:	080006e1 	.word	0x080006e1
 800061c:	08000711 	.word	0x08000711
		case GPIO_PORTA:{
			GPIOA->MODER &=  ~(0b11 << (copy_u8PinNumber*2));
 8000620:	4b4a      	ldr	r3, [pc, #296]	; (800074c <MGPIO_voidSetPinMode+0x164>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	79ba      	ldrb	r2, [r7, #6]
 8000626:	0052      	lsls	r2, r2, #1
 8000628:	2103      	movs	r1, #3
 800062a:	fa01 f202 	lsl.w	r2, r1, r2
 800062e:	43d2      	mvns	r2, r2
 8000630:	4611      	mov	r1, r2
 8000632:	4a46      	ldr	r2, [pc, #280]	; (800074c <MGPIO_voidSetPinMode+0x164>)
 8000634:	400b      	ands	r3, r1
 8000636:	6013      	str	r3, [r2, #0]
			GPIOA->MODER |=  (u32)(copy_u8Mode << (copy_u8PinNumber*2));
 8000638:	4b44      	ldr	r3, [pc, #272]	; (800074c <MGPIO_voidSetPinMode+0x164>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	7979      	ldrb	r1, [r7, #5]
 800063e:	79ba      	ldrb	r2, [r7, #6]
 8000640:	0052      	lsls	r2, r2, #1
 8000642:	fa01 f202 	lsl.w	r2, r1, r2
 8000646:	4611      	mov	r1, r2
 8000648:	4a40      	ldr	r2, [pc, #256]	; (800074c <MGPIO_voidSetPinMode+0x164>)
 800064a:	430b      	orrs	r3, r1
 800064c:	6013      	str	r3, [r2, #0]
			break;
 800064e:	e077      	b.n	8000740 <MGPIO_voidSetPinMode+0x158>
		}
		case GPIO_PORTB:{
			GPIOB->MODER &= ~(0b11 << (copy_u8PinNumber*2));
 8000650:	4b3f      	ldr	r3, [pc, #252]	; (8000750 <MGPIO_voidSetPinMode+0x168>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	79ba      	ldrb	r2, [r7, #6]
 8000656:	0052      	lsls	r2, r2, #1
 8000658:	2103      	movs	r1, #3
 800065a:	fa01 f202 	lsl.w	r2, r1, r2
 800065e:	43d2      	mvns	r2, r2
 8000660:	4611      	mov	r1, r2
 8000662:	4a3b      	ldr	r2, [pc, #236]	; (8000750 <MGPIO_voidSetPinMode+0x168>)
 8000664:	400b      	ands	r3, r1
 8000666:	6013      	str	r3, [r2, #0]
			GPIOB->MODER |=  (u32)(copy_u8Mode << (copy_u8PinNumber*2));
 8000668:	4b39      	ldr	r3, [pc, #228]	; (8000750 <MGPIO_voidSetPinMode+0x168>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	7979      	ldrb	r1, [r7, #5]
 800066e:	79ba      	ldrb	r2, [r7, #6]
 8000670:	0052      	lsls	r2, r2, #1
 8000672:	fa01 f202 	lsl.w	r2, r1, r2
 8000676:	4611      	mov	r1, r2
 8000678:	4a35      	ldr	r2, [pc, #212]	; (8000750 <MGPIO_voidSetPinMode+0x168>)
 800067a:	430b      	orrs	r3, r1
 800067c:	6013      	str	r3, [r2, #0]
			break;
 800067e:	e05f      	b.n	8000740 <MGPIO_voidSetPinMode+0x158>
		}
		case GPIO_PORTC:{
			GPIOC->MODER &= ~(0b11 << (copy_u8PinNumber*2));
 8000680:	4b34      	ldr	r3, [pc, #208]	; (8000754 <MGPIO_voidSetPinMode+0x16c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	79ba      	ldrb	r2, [r7, #6]
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	2103      	movs	r1, #3
 800068a:	fa01 f202 	lsl.w	r2, r1, r2
 800068e:	43d2      	mvns	r2, r2
 8000690:	4611      	mov	r1, r2
 8000692:	4a30      	ldr	r2, [pc, #192]	; (8000754 <MGPIO_voidSetPinMode+0x16c>)
 8000694:	400b      	ands	r3, r1
 8000696:	6013      	str	r3, [r2, #0]
			GPIOC->MODER |= (u32)(copy_u8Mode << (copy_u8PinNumber*2));
 8000698:	4b2e      	ldr	r3, [pc, #184]	; (8000754 <MGPIO_voidSetPinMode+0x16c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	7979      	ldrb	r1, [r7, #5]
 800069e:	79ba      	ldrb	r2, [r7, #6]
 80006a0:	0052      	lsls	r2, r2, #1
 80006a2:	fa01 f202 	lsl.w	r2, r1, r2
 80006a6:	4611      	mov	r1, r2
 80006a8:	4a2a      	ldr	r2, [pc, #168]	; (8000754 <MGPIO_voidSetPinMode+0x16c>)
 80006aa:	430b      	orrs	r3, r1
 80006ac:	6013      	str	r3, [r2, #0]
			break;
 80006ae:	e047      	b.n	8000740 <MGPIO_voidSetPinMode+0x158>
		}
		case GPIO_PORTD:{
			GPIOD->MODER &= ~(0b11 << (copy_u8PinNumber*2));
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <MGPIO_voidSetPinMode+0x170>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	79ba      	ldrb	r2, [r7, #6]
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	2103      	movs	r1, #3
 80006ba:	fa01 f202 	lsl.w	r2, r1, r2
 80006be:	43d2      	mvns	r2, r2
 80006c0:	4611      	mov	r1, r2
 80006c2:	4a25      	ldr	r2, [pc, #148]	; (8000758 <MGPIO_voidSetPinMode+0x170>)
 80006c4:	400b      	ands	r3, r1
 80006c6:	6013      	str	r3, [r2, #0]
			GPIOD->MODER |= (u32)(copy_u8Mode << (copy_u8PinNumber*2));
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <MGPIO_voidSetPinMode+0x170>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	7979      	ldrb	r1, [r7, #5]
 80006ce:	79ba      	ldrb	r2, [r7, #6]
 80006d0:	0052      	lsls	r2, r2, #1
 80006d2:	fa01 f202 	lsl.w	r2, r1, r2
 80006d6:	4611      	mov	r1, r2
 80006d8:	4a1f      	ldr	r2, [pc, #124]	; (8000758 <MGPIO_voidSetPinMode+0x170>)
 80006da:	430b      	orrs	r3, r1
 80006dc:	6013      	str	r3, [r2, #0]
			break;
 80006de:	e02f      	b.n	8000740 <MGPIO_voidSetPinMode+0x158>
		}
		case GPIO_PORTE:{
			GPIOE->MODER &= ~(0b11 << (copy_u8PinNumber*2));
 80006e0:	4b1e      	ldr	r3, [pc, #120]	; (800075c <MGPIO_voidSetPinMode+0x174>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	79ba      	ldrb	r2, [r7, #6]
 80006e6:	0052      	lsls	r2, r2, #1
 80006e8:	2103      	movs	r1, #3
 80006ea:	fa01 f202 	lsl.w	r2, r1, r2
 80006ee:	43d2      	mvns	r2, r2
 80006f0:	4611      	mov	r1, r2
 80006f2:	4a1a      	ldr	r2, [pc, #104]	; (800075c <MGPIO_voidSetPinMode+0x174>)
 80006f4:	400b      	ands	r3, r1
 80006f6:	6013      	str	r3, [r2, #0]
			GPIOE->MODER |=  (u32)(copy_u8Mode << (copy_u8PinNumber*2));
 80006f8:	4b18      	ldr	r3, [pc, #96]	; (800075c <MGPIO_voidSetPinMode+0x174>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	7979      	ldrb	r1, [r7, #5]
 80006fe:	79ba      	ldrb	r2, [r7, #6]
 8000700:	0052      	lsls	r2, r2, #1
 8000702:	fa01 f202 	lsl.w	r2, r1, r2
 8000706:	4611      	mov	r1, r2
 8000708:	4a14      	ldr	r2, [pc, #80]	; (800075c <MGPIO_voidSetPinMode+0x174>)
 800070a:	430b      	orrs	r3, r1
 800070c:	6013      	str	r3, [r2, #0]
			break;
 800070e:	e017      	b.n	8000740 <MGPIO_voidSetPinMode+0x158>
		}
		case GPIO_PORTH:{
			GPIOH->MODER &= ~(0b11 << (copy_u8PinNumber*2));
 8000710:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MGPIO_voidSetPinMode+0x178>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	79ba      	ldrb	r2, [r7, #6]
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	2103      	movs	r1, #3
 800071a:	fa01 f202 	lsl.w	r2, r1, r2
 800071e:	43d2      	mvns	r2, r2
 8000720:	4611      	mov	r1, r2
 8000722:	4a0f      	ldr	r2, [pc, #60]	; (8000760 <MGPIO_voidSetPinMode+0x178>)
 8000724:	400b      	ands	r3, r1
 8000726:	6013      	str	r3, [r2, #0]
			GPIOH->MODER |=  (u32)(copy_u8Mode << (copy_u8PinNumber*2));
 8000728:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <MGPIO_voidSetPinMode+0x178>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	7979      	ldrb	r1, [r7, #5]
 800072e:	79ba      	ldrb	r2, [r7, #6]
 8000730:	0052      	lsls	r2, r2, #1
 8000732:	fa01 f202 	lsl.w	r2, r1, r2
 8000736:	4611      	mov	r1, r2
 8000738:	4a09      	ldr	r2, [pc, #36]	; (8000760 <MGPIO_voidSetPinMode+0x178>)
 800073a:	430b      	orrs	r3, r1
 800073c:	6013      	str	r3, [r2, #0]
			break;
 800073e:	bf00      	nop
		}
	}
}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	40020000 	.word	0x40020000
 8000750:	40020400 	.word	0x40020400
 8000754:	40020800 	.word	0x40020800
 8000758:	40020c00 	.word	0x40020c00
 800075c:	40021000 	.word	0x40021000
 8000760:	40021c00 	.word	0x40021c00

08000764 <MGPIO_voidSetPinOutPutType>:


/***********************************Start Function*********************************************/


void MGPIO_voidSetPinOutPutType(u8 copy_u8PortId , u8 copy_u8PinNumber , u8 copy_u8OutPutType){
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
 800076e:	460b      	mov	r3, r1
 8000770:	71bb      	strb	r3, [r7, #6]
 8000772:	4613      	mov	r3, r2
 8000774:	717b      	strb	r3, [r7, #5]
	switch(copy_u8PortId){
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	2b05      	cmp	r3, #5
 800077a:	d851      	bhi.n	8000820 <MGPIO_voidSetPinOutPutType+0xbc>
 800077c:	a201      	add	r2, pc, #4	; (adr r2, 8000784 <MGPIO_voidSetPinOutPutType+0x20>)
 800077e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000782:	bf00      	nop
 8000784:	0800079d 	.word	0x0800079d
 8000788:	080007b3 	.word	0x080007b3
 800078c:	080007c9 	.word	0x080007c9
 8000790:	080007df 	.word	0x080007df
 8000794:	080007f5 	.word	0x080007f5
 8000798:	0800080b 	.word	0x0800080b
		case GPIO_PORTA:  GPIOA->OTYPER |=  (u32)(copy_u8OutPutType << (copy_u8PinNumber));  break;
 800079c:	4b23      	ldr	r3, [pc, #140]	; (800082c <MGPIO_voidSetPinOutPutType+0xc8>)
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	7979      	ldrb	r1, [r7, #5]
 80007a2:	79ba      	ldrb	r2, [r7, #6]
 80007a4:	fa01 f202 	lsl.w	r2, r1, r2
 80007a8:	4611      	mov	r1, r2
 80007aa:	4a20      	ldr	r2, [pc, #128]	; (800082c <MGPIO_voidSetPinOutPutType+0xc8>)
 80007ac:	430b      	orrs	r3, r1
 80007ae:	6053      	str	r3, [r2, #4]
 80007b0:	e036      	b.n	8000820 <MGPIO_voidSetPinOutPutType+0xbc>
		case GPIO_PORTB:  GPIOB->OTYPER |=  (u32)(copy_u8OutPutType << (copy_u8PinNumber));  break;
 80007b2:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <MGPIO_voidSetPinOutPutType+0xcc>)
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	7979      	ldrb	r1, [r7, #5]
 80007b8:	79ba      	ldrb	r2, [r7, #6]
 80007ba:	fa01 f202 	lsl.w	r2, r1, r2
 80007be:	4611      	mov	r1, r2
 80007c0:	4a1b      	ldr	r2, [pc, #108]	; (8000830 <MGPIO_voidSetPinOutPutType+0xcc>)
 80007c2:	430b      	orrs	r3, r1
 80007c4:	6053      	str	r3, [r2, #4]
 80007c6:	e02b      	b.n	8000820 <MGPIO_voidSetPinOutPutType+0xbc>
		case GPIO_PORTC:  GPIOC->OTYPER |=  (u32)(copy_u8OutPutType << (copy_u8PinNumber));  break;
 80007c8:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <MGPIO_voidSetPinOutPutType+0xd0>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	7979      	ldrb	r1, [r7, #5]
 80007ce:	79ba      	ldrb	r2, [r7, #6]
 80007d0:	fa01 f202 	lsl.w	r2, r1, r2
 80007d4:	4611      	mov	r1, r2
 80007d6:	4a17      	ldr	r2, [pc, #92]	; (8000834 <MGPIO_voidSetPinOutPutType+0xd0>)
 80007d8:	430b      	orrs	r3, r1
 80007da:	6053      	str	r3, [r2, #4]
 80007dc:	e020      	b.n	8000820 <MGPIO_voidSetPinOutPutType+0xbc>
		case GPIO_PORTD:  GPIOD->OTYPER |=  (u32)(copy_u8OutPutType << (copy_u8PinNumber));  break;
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MGPIO_voidSetPinOutPutType+0xd4>)
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	7979      	ldrb	r1, [r7, #5]
 80007e4:	79ba      	ldrb	r2, [r7, #6]
 80007e6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ea:	4611      	mov	r1, r2
 80007ec:	4a12      	ldr	r2, [pc, #72]	; (8000838 <MGPIO_voidSetPinOutPutType+0xd4>)
 80007ee:	430b      	orrs	r3, r1
 80007f0:	6053      	str	r3, [r2, #4]
 80007f2:	e015      	b.n	8000820 <MGPIO_voidSetPinOutPutType+0xbc>
		case GPIO_PORTE:  GPIOE->OTYPER |=  (u32)(copy_u8OutPutType << (copy_u8PinNumber));  break;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <MGPIO_voidSetPinOutPutType+0xd8>)
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	7979      	ldrb	r1, [r7, #5]
 80007fa:	79ba      	ldrb	r2, [r7, #6]
 80007fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000800:	4611      	mov	r1, r2
 8000802:	4a0e      	ldr	r2, [pc, #56]	; (800083c <MGPIO_voidSetPinOutPutType+0xd8>)
 8000804:	430b      	orrs	r3, r1
 8000806:	6053      	str	r3, [r2, #4]
 8000808:	e00a      	b.n	8000820 <MGPIO_voidSetPinOutPutType+0xbc>
		case GPIO_PORTH:  GPIOH->OTYPER |=  (u32)(copy_u8OutPutType << (copy_u8PinNumber));  break;
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <MGPIO_voidSetPinOutPutType+0xdc>)
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	7979      	ldrb	r1, [r7, #5]
 8000810:	79ba      	ldrb	r2, [r7, #6]
 8000812:	fa01 f202 	lsl.w	r2, r1, r2
 8000816:	4611      	mov	r1, r2
 8000818:	4a09      	ldr	r2, [pc, #36]	; (8000840 <MGPIO_voidSetPinOutPutType+0xdc>)
 800081a:	430b      	orrs	r3, r1
 800081c:	6053      	str	r3, [r2, #4]
 800081e:	bf00      	nop
	}
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	40020000 	.word	0x40020000
 8000830:	40020400 	.word	0x40020400
 8000834:	40020800 	.word	0x40020800
 8000838:	40020c00 	.word	0x40020c00
 800083c:	40021000 	.word	0x40021000
 8000840:	40021c00 	.word	0x40021c00

08000844 <MGPIO_voidSetPinInputPull>:


/***********************************Start Function*********************************************/


void MGPIO_voidSetPinInputPull(u8 copy_u8PortId , u8 copy_u8PinNumber , u8 copy_u8PullType){
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
 800084e:	460b      	mov	r3, r1
 8000850:	71bb      	strb	r3, [r7, #6]
 8000852:	4613      	mov	r3, r2
 8000854:	717b      	strb	r3, [r7, #5]
	switch(copy_u8PortId){
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	2b05      	cmp	r3, #5
 800085a:	f200 809f 	bhi.w	800099c <MGPIO_voidSetPinInputPull+0x158>
 800085e:	a201      	add	r2, pc, #4	; (adr r2, 8000864 <MGPIO_voidSetPinInputPull+0x20>)
 8000860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000864:	0800087d 	.word	0x0800087d
 8000868:	080008ad 	.word	0x080008ad
 800086c:	080008dd 	.word	0x080008dd
 8000870:	0800090d 	.word	0x0800090d
 8000874:	0800093d 	.word	0x0800093d
 8000878:	0800096d 	.word	0x0800096d
		case GPIO_PORTA:{
			GPIOA->PUPDR &=  ~(0b11 << (copy_u8PinNumber*2));
 800087c:	4b4a      	ldr	r3, [pc, #296]	; (80009a8 <MGPIO_voidSetPinInputPull+0x164>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	79ba      	ldrb	r2, [r7, #6]
 8000882:	0052      	lsls	r2, r2, #1
 8000884:	2103      	movs	r1, #3
 8000886:	fa01 f202 	lsl.w	r2, r1, r2
 800088a:	43d2      	mvns	r2, r2
 800088c:	4611      	mov	r1, r2
 800088e:	4a46      	ldr	r2, [pc, #280]	; (80009a8 <MGPIO_voidSetPinInputPull+0x164>)
 8000890:	400b      	ands	r3, r1
 8000892:	60d3      	str	r3, [r2, #12]
			GPIOA->PUPDR |=  (u32)(copy_u8PullType << (copy_u8PinNumber*2));
 8000894:	4b44      	ldr	r3, [pc, #272]	; (80009a8 <MGPIO_voidSetPinInputPull+0x164>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	7979      	ldrb	r1, [r7, #5]
 800089a:	79ba      	ldrb	r2, [r7, #6]
 800089c:	0052      	lsls	r2, r2, #1
 800089e:	fa01 f202 	lsl.w	r2, r1, r2
 80008a2:	4611      	mov	r1, r2
 80008a4:	4a40      	ldr	r2, [pc, #256]	; (80009a8 <MGPIO_voidSetPinInputPull+0x164>)
 80008a6:	430b      	orrs	r3, r1
 80008a8:	60d3      	str	r3, [r2, #12]
			break;
 80008aa:	e077      	b.n	800099c <MGPIO_voidSetPinInputPull+0x158>
		}
		case GPIO_PORTB:{
			GPIOB->PUPDR &= ~(0b11 << (copy_u8PinNumber*2));
 80008ac:	4b3f      	ldr	r3, [pc, #252]	; (80009ac <MGPIO_voidSetPinInputPull+0x168>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	79ba      	ldrb	r2, [r7, #6]
 80008b2:	0052      	lsls	r2, r2, #1
 80008b4:	2103      	movs	r1, #3
 80008b6:	fa01 f202 	lsl.w	r2, r1, r2
 80008ba:	43d2      	mvns	r2, r2
 80008bc:	4611      	mov	r1, r2
 80008be:	4a3b      	ldr	r2, [pc, #236]	; (80009ac <MGPIO_voidSetPinInputPull+0x168>)
 80008c0:	400b      	ands	r3, r1
 80008c2:	60d3      	str	r3, [r2, #12]
			GPIOB->PUPDR |=  (u32)(copy_u8PullType << (copy_u8PinNumber*2));
 80008c4:	4b39      	ldr	r3, [pc, #228]	; (80009ac <MGPIO_voidSetPinInputPull+0x168>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	7979      	ldrb	r1, [r7, #5]
 80008ca:	79ba      	ldrb	r2, [r7, #6]
 80008cc:	0052      	lsls	r2, r2, #1
 80008ce:	fa01 f202 	lsl.w	r2, r1, r2
 80008d2:	4611      	mov	r1, r2
 80008d4:	4a35      	ldr	r2, [pc, #212]	; (80009ac <MGPIO_voidSetPinInputPull+0x168>)
 80008d6:	430b      	orrs	r3, r1
 80008d8:	60d3      	str	r3, [r2, #12]
			break;
 80008da:	e05f      	b.n	800099c <MGPIO_voidSetPinInputPull+0x158>
		}
		case GPIO_PORTC:{
			GPIOC->PUPDR &= ~(0b11 << (copy_u8PinNumber*2));
 80008dc:	4b34      	ldr	r3, [pc, #208]	; (80009b0 <MGPIO_voidSetPinInputPull+0x16c>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	79ba      	ldrb	r2, [r7, #6]
 80008e2:	0052      	lsls	r2, r2, #1
 80008e4:	2103      	movs	r1, #3
 80008e6:	fa01 f202 	lsl.w	r2, r1, r2
 80008ea:	43d2      	mvns	r2, r2
 80008ec:	4611      	mov	r1, r2
 80008ee:	4a30      	ldr	r2, [pc, #192]	; (80009b0 <MGPIO_voidSetPinInputPull+0x16c>)
 80008f0:	400b      	ands	r3, r1
 80008f2:	60d3      	str	r3, [r2, #12]
			GPIOC->PUPDR |= (u32)(copy_u8PullType << (copy_u8PinNumber*2));
 80008f4:	4b2e      	ldr	r3, [pc, #184]	; (80009b0 <MGPIO_voidSetPinInputPull+0x16c>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	7979      	ldrb	r1, [r7, #5]
 80008fa:	79ba      	ldrb	r2, [r7, #6]
 80008fc:	0052      	lsls	r2, r2, #1
 80008fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000902:	4611      	mov	r1, r2
 8000904:	4a2a      	ldr	r2, [pc, #168]	; (80009b0 <MGPIO_voidSetPinInputPull+0x16c>)
 8000906:	430b      	orrs	r3, r1
 8000908:	60d3      	str	r3, [r2, #12]
			break;
 800090a:	e047      	b.n	800099c <MGPIO_voidSetPinInputPull+0x158>
		}
		case GPIO_PORTD:{
			GPIOD->PUPDR &= ~(0b11 << (copy_u8PinNumber*2));
 800090c:	4b29      	ldr	r3, [pc, #164]	; (80009b4 <MGPIO_voidSetPinInputPull+0x170>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	79ba      	ldrb	r2, [r7, #6]
 8000912:	0052      	lsls	r2, r2, #1
 8000914:	2103      	movs	r1, #3
 8000916:	fa01 f202 	lsl.w	r2, r1, r2
 800091a:	43d2      	mvns	r2, r2
 800091c:	4611      	mov	r1, r2
 800091e:	4a25      	ldr	r2, [pc, #148]	; (80009b4 <MGPIO_voidSetPinInputPull+0x170>)
 8000920:	400b      	ands	r3, r1
 8000922:	60d3      	str	r3, [r2, #12]
			GPIOD->PUPDR |= (u32)(copy_u8PullType << (copy_u8PinNumber*2));
 8000924:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <MGPIO_voidSetPinInputPull+0x170>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	7979      	ldrb	r1, [r7, #5]
 800092a:	79ba      	ldrb	r2, [r7, #6]
 800092c:	0052      	lsls	r2, r2, #1
 800092e:	fa01 f202 	lsl.w	r2, r1, r2
 8000932:	4611      	mov	r1, r2
 8000934:	4a1f      	ldr	r2, [pc, #124]	; (80009b4 <MGPIO_voidSetPinInputPull+0x170>)
 8000936:	430b      	orrs	r3, r1
 8000938:	60d3      	str	r3, [r2, #12]
			break;
 800093a:	e02f      	b.n	800099c <MGPIO_voidSetPinInputPull+0x158>
		}
		case GPIO_PORTE:{
			GPIOE->PUPDR &= ~(0b11 << (copy_u8PinNumber*2));
 800093c:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <MGPIO_voidSetPinInputPull+0x174>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	79ba      	ldrb	r2, [r7, #6]
 8000942:	0052      	lsls	r2, r2, #1
 8000944:	2103      	movs	r1, #3
 8000946:	fa01 f202 	lsl.w	r2, r1, r2
 800094a:	43d2      	mvns	r2, r2
 800094c:	4611      	mov	r1, r2
 800094e:	4a1a      	ldr	r2, [pc, #104]	; (80009b8 <MGPIO_voidSetPinInputPull+0x174>)
 8000950:	400b      	ands	r3, r1
 8000952:	60d3      	str	r3, [r2, #12]
			GPIOE->PUPDR |=  (u32)(copy_u8PullType << (copy_u8PinNumber*2));
 8000954:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <MGPIO_voidSetPinInputPull+0x174>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	7979      	ldrb	r1, [r7, #5]
 800095a:	79ba      	ldrb	r2, [r7, #6]
 800095c:	0052      	lsls	r2, r2, #1
 800095e:	fa01 f202 	lsl.w	r2, r1, r2
 8000962:	4611      	mov	r1, r2
 8000964:	4a14      	ldr	r2, [pc, #80]	; (80009b8 <MGPIO_voidSetPinInputPull+0x174>)
 8000966:	430b      	orrs	r3, r1
 8000968:	60d3      	str	r3, [r2, #12]
			break;
 800096a:	e017      	b.n	800099c <MGPIO_voidSetPinInputPull+0x158>
		}
		case GPIO_PORTH:{
			GPIOH->PUPDR &= ~(0b11 << (copy_u8PinNumber*2));
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <MGPIO_voidSetPinInputPull+0x178>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	79ba      	ldrb	r2, [r7, #6]
 8000972:	0052      	lsls	r2, r2, #1
 8000974:	2103      	movs	r1, #3
 8000976:	fa01 f202 	lsl.w	r2, r1, r2
 800097a:	43d2      	mvns	r2, r2
 800097c:	4611      	mov	r1, r2
 800097e:	4a0f      	ldr	r2, [pc, #60]	; (80009bc <MGPIO_voidSetPinInputPull+0x178>)
 8000980:	400b      	ands	r3, r1
 8000982:	60d3      	str	r3, [r2, #12]
			GPIOH->PUPDR |=  (u32)(copy_u8PullType << (copy_u8PinNumber*2));
 8000984:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <MGPIO_voidSetPinInputPull+0x178>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	7979      	ldrb	r1, [r7, #5]
 800098a:	79ba      	ldrb	r2, [r7, #6]
 800098c:	0052      	lsls	r2, r2, #1
 800098e:	fa01 f202 	lsl.w	r2, r1, r2
 8000992:	4611      	mov	r1, r2
 8000994:	4a09      	ldr	r2, [pc, #36]	; (80009bc <MGPIO_voidSetPinInputPull+0x178>)
 8000996:	430b      	orrs	r3, r1
 8000998:	60d3      	str	r3, [r2, #12]
			break;
 800099a:	bf00      	nop
		}
	}
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	40020000 	.word	0x40020000
 80009ac:	40020400 	.word	0x40020400
 80009b0:	40020800 	.word	0x40020800
 80009b4:	40020c00 	.word	0x40020c00
 80009b8:	40021000 	.word	0x40021000
 80009bc:	40021c00 	.word	0x40021c00

080009c0 <MGPIO_voidSetPinValue>:


/***********************************Start Function*********************************************/


void MGPIO_voidSetPinValue(u8 copy_u8PortId , u8 copy_u8PinNumber , u8 copy_u8Value){
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
 80009ca:	460b      	mov	r3, r1
 80009cc:	71bb      	strb	r3, [r7, #6]
 80009ce:	4613      	mov	r3, r2
 80009d0:	717b      	strb	r3, [r7, #5]
	switch(copy_u8PortId){
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b05      	cmp	r3, #5
 80009d6:	f200 8093 	bhi.w	8000b00 <MGPIO_voidSetPinValue+0x140>
 80009da:	a201      	add	r2, pc, #4	; (adr r2, 80009e0 <MGPIO_voidSetPinValue+0x20>)
 80009dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e0:	080009f9 	.word	0x080009f9
 80009e4:	08000a25 	.word	0x08000a25
 80009e8:	08000a51 	.word	0x08000a51
 80009ec:	08000a7d 	.word	0x08000a7d
 80009f0:	08000aa9 	.word	0x08000aa9
 80009f4:	08000ad5 	.word	0x08000ad5
	    case GPIO_PORTA: {
		   GPIOA->ODR &= ~(1<<copy_u8PinNumber);
 80009f8:	4b44      	ldr	r3, [pc, #272]	; (8000b0c <MGPIO_voidSetPinValue+0x14c>)
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	79ba      	ldrb	r2, [r7, #6]
 80009fe:	2101      	movs	r1, #1
 8000a00:	fa01 f202 	lsl.w	r2, r1, r2
 8000a04:	43d2      	mvns	r2, r2
 8000a06:	4611      	mov	r1, r2
 8000a08:	4a40      	ldr	r2, [pc, #256]	; (8000b0c <MGPIO_voidSetPinValue+0x14c>)
 8000a0a:	400b      	ands	r3, r1
 8000a0c:	6153      	str	r3, [r2, #20]
		   GPIOA->ODR |=  (u32)(copy_u8Value << (copy_u8PinNumber));  break;
 8000a0e:	4b3f      	ldr	r3, [pc, #252]	; (8000b0c <MGPIO_voidSetPinValue+0x14c>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	7979      	ldrb	r1, [r7, #5]
 8000a14:	79ba      	ldrb	r2, [r7, #6]
 8000a16:	fa01 f202 	lsl.w	r2, r1, r2
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	4a3b      	ldr	r2, [pc, #236]	; (8000b0c <MGPIO_voidSetPinValue+0x14c>)
 8000a1e:	430b      	orrs	r3, r1
 8000a20:	6153      	str	r3, [r2, #20]
 8000a22:	e06d      	b.n	8000b00 <MGPIO_voidSetPinValue+0x140>
	    }
	    case GPIO_PORTB: {
	    	GPIOB->ODR &= ~(1<<copy_u8PinNumber);
 8000a24:	4b3a      	ldr	r3, [pc, #232]	; (8000b10 <MGPIO_voidSetPinValue+0x150>)
 8000a26:	695b      	ldr	r3, [r3, #20]
 8000a28:	79ba      	ldrb	r2, [r7, #6]
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a30:	43d2      	mvns	r2, r2
 8000a32:	4611      	mov	r1, r2
 8000a34:	4a36      	ldr	r2, [pc, #216]	; (8000b10 <MGPIO_voidSetPinValue+0x150>)
 8000a36:	400b      	ands	r3, r1
 8000a38:	6153      	str	r3, [r2, #20]
		    GPIOB->ODR |=  (u32)(copy_u8Value << (copy_u8PinNumber));  break;
 8000a3a:	4b35      	ldr	r3, [pc, #212]	; (8000b10 <MGPIO_voidSetPinValue+0x150>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	7979      	ldrb	r1, [r7, #5]
 8000a40:	79ba      	ldrb	r2, [r7, #6]
 8000a42:	fa01 f202 	lsl.w	r2, r1, r2
 8000a46:	4611      	mov	r1, r2
 8000a48:	4a31      	ldr	r2, [pc, #196]	; (8000b10 <MGPIO_voidSetPinValue+0x150>)
 8000a4a:	430b      	orrs	r3, r1
 8000a4c:	6153      	str	r3, [r2, #20]
 8000a4e:	e057      	b.n	8000b00 <MGPIO_voidSetPinValue+0x140>
	    }
		case GPIO_PORTC: {
			GPIOC->ODR &= ~(1<<copy_u8PinNumber);
 8000a50:	4b30      	ldr	r3, [pc, #192]	; (8000b14 <MGPIO_voidSetPinValue+0x154>)
 8000a52:	695b      	ldr	r3, [r3, #20]
 8000a54:	79ba      	ldrb	r2, [r7, #6]
 8000a56:	2101      	movs	r1, #1
 8000a58:	fa01 f202 	lsl.w	r2, r1, r2
 8000a5c:	43d2      	mvns	r2, r2
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4a2c      	ldr	r2, [pc, #176]	; (8000b14 <MGPIO_voidSetPinValue+0x154>)
 8000a62:	400b      	ands	r3, r1
 8000a64:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |=  (u32)(copy_u8Value << (copy_u8PinNumber));  break;
 8000a66:	4b2b      	ldr	r3, [pc, #172]	; (8000b14 <MGPIO_voidSetPinValue+0x154>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	7979      	ldrb	r1, [r7, #5]
 8000a6c:	79ba      	ldrb	r2, [r7, #6]
 8000a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a72:	4611      	mov	r1, r2
 8000a74:	4a27      	ldr	r2, [pc, #156]	; (8000b14 <MGPIO_voidSetPinValue+0x154>)
 8000a76:	430b      	orrs	r3, r1
 8000a78:	6153      	str	r3, [r2, #20]
 8000a7a:	e041      	b.n	8000b00 <MGPIO_voidSetPinValue+0x140>
		}
		case GPIO_PORTD: {
			GPIOD->ODR &= ~(1<<copy_u8PinNumber);
 8000a7c:	4b26      	ldr	r3, [pc, #152]	; (8000b18 <MGPIO_voidSetPinValue+0x158>)
 8000a7e:	695b      	ldr	r3, [r3, #20]
 8000a80:	79ba      	ldrb	r2, [r7, #6]
 8000a82:	2101      	movs	r1, #1
 8000a84:	fa01 f202 	lsl.w	r2, r1, r2
 8000a88:	43d2      	mvns	r2, r2
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	4a22      	ldr	r2, [pc, #136]	; (8000b18 <MGPIO_voidSetPinValue+0x158>)
 8000a8e:	400b      	ands	r3, r1
 8000a90:	6153      	str	r3, [r2, #20]
			GPIOD->ODR |=  (u32)(copy_u8Value << (copy_u8PinNumber));  break;
 8000a92:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <MGPIO_voidSetPinValue+0x158>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	7979      	ldrb	r1, [r7, #5]
 8000a98:	79ba      	ldrb	r2, [r7, #6]
 8000a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	4a1d      	ldr	r2, [pc, #116]	; (8000b18 <MGPIO_voidSetPinValue+0x158>)
 8000aa2:	430b      	orrs	r3, r1
 8000aa4:	6153      	str	r3, [r2, #20]
 8000aa6:	e02b      	b.n	8000b00 <MGPIO_voidSetPinValue+0x140>
		}
		case GPIO_PORTE: {
			GPIOE->ODR &= ~(1<<copy_u8PinNumber);
 8000aa8:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <MGPIO_voidSetPinValue+0x15c>)
 8000aaa:	695b      	ldr	r3, [r3, #20]
 8000aac:	79ba      	ldrb	r2, [r7, #6]
 8000aae:	2101      	movs	r1, #1
 8000ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab4:	43d2      	mvns	r2, r2
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	4a18      	ldr	r2, [pc, #96]	; (8000b1c <MGPIO_voidSetPinValue+0x15c>)
 8000aba:	400b      	ands	r3, r1
 8000abc:	6153      	str	r3, [r2, #20]
			GPIOE->ODR |=  (u32)(copy_u8Value << (copy_u8PinNumber));  break;
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MGPIO_voidSetPinValue+0x15c>)
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	7979      	ldrb	r1, [r7, #5]
 8000ac4:	79ba      	ldrb	r2, [r7, #6]
 8000ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aca:	4611      	mov	r1, r2
 8000acc:	4a13      	ldr	r2, [pc, #76]	; (8000b1c <MGPIO_voidSetPinValue+0x15c>)
 8000ace:	430b      	orrs	r3, r1
 8000ad0:	6153      	str	r3, [r2, #20]
 8000ad2:	e015      	b.n	8000b00 <MGPIO_voidSetPinValue+0x140>
		}
		case GPIO_PORTH: {
			GPIOH->ODR &= ~(1<<copy_u8PinNumber);
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MGPIO_voidSetPinValue+0x160>)
 8000ad6:	695b      	ldr	r3, [r3, #20]
 8000ad8:	79ba      	ldrb	r2, [r7, #6]
 8000ada:	2101      	movs	r1, #1
 8000adc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae0:	43d2      	mvns	r2, r2
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <MGPIO_voidSetPinValue+0x160>)
 8000ae6:	400b      	ands	r3, r1
 8000ae8:	6153      	str	r3, [r2, #20]
			GPIOH->ODR |=  (u32)(copy_u8Value << (copy_u8PinNumber));  break;
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <MGPIO_voidSetPinValue+0x160>)
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	7979      	ldrb	r1, [r7, #5]
 8000af0:	79ba      	ldrb	r2, [r7, #6]
 8000af2:	fa01 f202 	lsl.w	r2, r1, r2
 8000af6:	4611      	mov	r1, r2
 8000af8:	4a09      	ldr	r2, [pc, #36]	; (8000b20 <MGPIO_voidSetPinValue+0x160>)
 8000afa:	430b      	orrs	r3, r1
 8000afc:	6153      	str	r3, [r2, #20]
 8000afe:	bf00      	nop
		}
	}
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	40020000 	.word	0x40020000
 8000b10:	40020400 	.word	0x40020400
 8000b14:	40020800 	.word	0x40020800
 8000b18:	40020c00 	.word	0x40020c00
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40021c00 	.word	0x40021c00

08000b24 <MNVIC_EnableIRQ>:
#include"MNVIC_private.h"
#include"MNVIC_config.h"
#include"MNVIC.interface.h"


void MNVIC_EnableIRQ(NVIC_IRQN IRQn){
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
	if((u32)IRQn >= 0) SET_BIT(NVIC->ISER[(u32)IRQn>>5] , ((u32)IRQn & 0x1FUL));
 8000b2e:	4a0d      	ldr	r2, [pc, #52]	; (8000b64 <MNVIC_EnableIRQ+0x40>)
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	095b      	lsrs	r3, r3, #5
 8000b36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	f003 031f 	and.w	r3, r3, #31
 8000b40:	2101      	movs	r1, #1
 8000b42:	fa01 f303 	lsl.w	r3, r1, r3
 8000b46:	4618      	mov	r0, r3
 8000b48:	4906      	ldr	r1, [pc, #24]	; (8000b64 <MNVIC_EnableIRQ+0x40>)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	095b      	lsrs	r3, r3, #5
 8000b50:	4302      	orrs	r2, r0
 8000b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000e100 	.word	0xe000e100

08000b68 <MRCC_voidInit>:
#include"MRRC_private.h"
#include"MRRC_config.h"
#include"MRRC_interface.h"


void MRCC_voidInit(u8 copy_u8ClockSource){
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
	switch(copy_u8ClockSource){
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d062      	beq.n	8000c3e <MRCC_voidInit+0xd6>
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	f300 80a2 	bgt.w	8000cc2 <MRCC_voidInit+0x15a>
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d033      	beq.n	8000bea <MRCC_voidInit+0x82>
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	f040 809d 	bne.w	8000cc2 <MRCC_voidInit+0x15a>
		case MRCC_HSE:{
			/*ENABLE HSE as a clock source*/
			SET_BIT(RCC->CR , HSEON);
 8000b88:	4b51      	ldr	r3, [pc, #324]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a50      	ldr	r2, [pc, #320]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b92:	6013      	str	r3, [r2, #0]
			while(!(GET_BIT(RCC->CR, HSERDY)));
 8000b94:	bf00      	nop
 8000b96:	4b4e      	ldr	r3, [pc, #312]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	0c5b      	lsrs	r3, r3, #17
 8000b9c:	f003 0301 	and.w	r3, r3, #1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d0f8      	beq.n	8000b96 <MRCC_voidInit+0x2e>
			switch(HSE_MODE){
				case HSE_CRYSTAL :   CLR_BIT(RCC->CR , HSEBYP);   break;
				case HSE_RC :   SET_BIT(RCC->CR , HSEBYP);   break;
 8000ba4:	4b4a      	ldr	r3, [pc, #296]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a49      	ldr	r2, [pc, #292]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000baa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bae:	6013      	str	r3, [r2, #0]
 8000bb0:	bf00      	nop
				}
			 /*Input System Clock*/
			 SET_BIT(RCC->CFGR , SW0);
 8000bb2:	4b47      	ldr	r3, [pc, #284]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	4a46      	ldr	r2, [pc, #280]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6093      	str	r3, [r2, #8]
			 CLR_BIT(RCC->CFGR , SW1);
 8000bbe:	4b44      	ldr	r3, [pc, #272]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	4a43      	ldr	r2, [pc, #268]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000bc4:	f023 0302 	bic.w	r3, r3, #2
 8000bc8:	6093      	str	r3, [r2, #8]
			 while(!((GET_BIT(RCC->CFGR , SWS2) == 1)) && (GET_BIT(RCC->CFGR , SWS3) == 0 ));
 8000bca:	bf00      	nop
 8000bcc:	4b40      	ldr	r3, [pc, #256]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	089b      	lsrs	r3, r3, #2
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d070      	beq.n	8000cbc <MRCC_voidInit+0x154>
 8000bda:	4b3d      	ldr	r3, [pc, #244]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	08db      	lsrs	r3, r3, #3
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d0f1      	beq.n	8000bcc <MRCC_voidInit+0x64>
			}
			break;
 8000be8:	e068      	b.n	8000cbc <MRCC_voidInit+0x154>

		case MRCC_HSI:{
			/*ENABLE HSI as a clock source*/
			SET_BIT(RCC->CR , HSION);
 8000bea:	4b39      	ldr	r3, [pc, #228]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a38      	ldr	r2, [pc, #224]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6013      	str	r3, [r2, #0]
			while(!(GET_BIT(RCC->CR , HSIRDY)));
 8000bf6:	bf00      	nop
 8000bf8:	4b35      	ldr	r3, [pc, #212]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	085b      	lsrs	r3, r3, #1
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d0f8      	beq.n	8000bf8 <MRCC_voidInit+0x90>
			/*Input System Clock*/
			CLR_BIT(RCC->CFGR , SW0);
 8000c06:	4b32      	ldr	r3, [pc, #200]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	4a31      	ldr	r2, [pc, #196]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000c0c:	f023 0301 	bic.w	r3, r3, #1
 8000c10:	6093      	str	r3, [r2, #8]
			CLR_BIT(RCC->CFGR , SW1);
 8000c12:	4b2f      	ldr	r3, [pc, #188]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	4a2e      	ldr	r2, [pc, #184]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000c18:	f023 0302 	bic.w	r3, r3, #2
 8000c1c:	6093      	str	r3, [r2, #8]
			while(!((GET_BIT(RCC->CFGR , SWS2) == 0)) && (GET_BIT(RCC->CFGR , SWS3) == 0 ));
 8000c1e:	bf00      	nop
 8000c20:	4b2b      	ldr	r3, [pc, #172]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	089b      	lsrs	r3, r3, #2
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d048      	beq.n	8000cc0 <MRCC_voidInit+0x158>
 8000c2e:	4b28      	ldr	r3, [pc, #160]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	08db      	lsrs	r3, r3, #3
 8000c34:	f003 0301 	and.w	r3, r3, #1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d0f1      	beq.n	8000c20 <MRCC_voidInit+0xb8>
			break;
 8000c3c:	e040      	b.n	8000cc0 <MRCC_voidInit+0x158>
		  }
		case MRCC_PLL:{
			switch(PLL_MODE){
				case PLL_HSI_MODE:{
					/*Enable HSI*/
					SET_BIT(RCC->CR , HSION);
 8000c3e:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a23      	ldr	r2, [pc, #140]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6013      	str	r3, [r2, #0]
					while(!(GET_BIT(RCC->CR , HSIRDY)));
 8000c4a:	bf00      	nop
 8000c4c:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	085b      	lsrs	r3, r3, #1
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d0f8      	beq.n	8000c4c <MRCC_voidInit+0xe4>
					/*Enable PLL*/
					SET_BIT(RCC->CR , PLLON);
 8000c5a:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a1c      	ldr	r2, [pc, #112]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000c60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c64:	6013      	str	r3, [r2, #0]
					while(!(GET_BIT(RCC->CR , PLLRDY)));
 8000c66:	bf00      	nop
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	0e5b      	lsrs	r3, r3, #25
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d0f8      	beq.n	8000c68 <MRCC_voidInit+0x100>
					/*CHOOSE HSI IN PLL*/
					CLR_BIT(RCC->PLLCFGR , PLLSRC);
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	4a15      	ldr	r2, [pc, #84]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000c7c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000c80:	6053      	str	r3, [r2, #4]
					/*Input System Clock*/
					CLR_BIT(RCC->CFGR , SW0);
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000c88:	f023 0301 	bic.w	r3, r3, #1
 8000c8c:	6093      	str	r3, [r2, #8]
					SET_BIT(RCC->CFGR , SW1);
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000c94:	f043 0302 	orr.w	r3, r3, #2
 8000c98:	6093      	str	r3, [r2, #8]
					while(!((GET_BIT(RCC->CFGR , SWS2) == 0)) && (GET_BIT(RCC->CFGR , SWS3) == 1 ));
 8000c9a:	bf00      	nop
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	089b      	lsrs	r3, r3, #2
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d006      	beq.n	8000cb8 <MRCC_voidInit+0x150>
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MRCC_voidInit+0x168>)
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	08db      	lsrs	r3, r3, #3
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d0f1      	beq.n	8000c9c <MRCC_voidInit+0x134>
					break;
 8000cb8:	bf00      	nop
					SET_BIT(RCC->CFGR , SW1);
					while(!((GET_BIT(RCC->CFGR , SWS2) == 0)) && (GET_BIT(RCC->CFGR , SWS3) == 1 ));
					break;
				}
			}
			break;
 8000cba:	e002      	b.n	8000cc2 <MRCC_voidInit+0x15a>
			break;
 8000cbc:	bf00      	nop
 8000cbe:	e000      	b.n	8000cc2 <MRCC_voidInit+0x15a>
			break;
 8000cc0:	bf00      	nop
		 }
		}
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800

08000cd4 <MRCC_voidEnablePeripheral>:

void MRCC_voidSecurityOff(void){
	CLR_BIT(RCC->CR , CSSON);
}

void MRCC_voidEnablePeripheral(u8 copy_u8BusName , u8 copy_u8Peripheral){
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	460a      	mov	r2, r1
 8000cde:	71fb      	strb	r3, [r7, #7]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	71bb      	strb	r3, [r7, #6]
	switch(copy_u8BusName){
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	2b03      	cmp	r3, #3
 8000cea:	d837      	bhi.n	8000d5c <MRCC_voidEnablePeripheral+0x88>
 8000cec:	a201      	add	r2, pc, #4	; (adr r2, 8000cf4 <MRCC_voidEnablePeripheral+0x20>)
 8000cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf2:	bf00      	nop
 8000cf4:	08000d05 	.word	0x08000d05
 8000cf8:	08000d1b 	.word	0x08000d1b
 8000cfc:	08000d31 	.word	0x08000d31
 8000d00:	08000d47 	.word	0x08000d47
		case AHB1ENR_BUS:   SET_BIT(RCC->AHB1ENR , copy_u8Peripheral);   break;
 8000d04:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <MRCC_voidEnablePeripheral+0x94>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	79ba      	ldrb	r2, [r7, #6]
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d10:	4611      	mov	r1, r2
 8000d12:	4a15      	ldr	r2, [pc, #84]	; (8000d68 <MRCC_voidEnablePeripheral+0x94>)
 8000d14:	430b      	orrs	r3, r1
 8000d16:	6313      	str	r3, [r2, #48]	; 0x30
 8000d18:	e020      	b.n	8000d5c <MRCC_voidEnablePeripheral+0x88>
		case AHB2ENR_BUS:   SET_BIT(RCC->AHB2ENR , copy_u8Peripheral);   break;
 8000d1a:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <MRCC_voidEnablePeripheral+0x94>)
 8000d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d1e:	79ba      	ldrb	r2, [r7, #6]
 8000d20:	2101      	movs	r1, #1
 8000d22:	fa01 f202 	lsl.w	r2, r1, r2
 8000d26:	4611      	mov	r1, r2
 8000d28:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <MRCC_voidEnablePeripheral+0x94>)
 8000d2a:	430b      	orrs	r3, r1
 8000d2c:	6353      	str	r3, [r2, #52]	; 0x34
 8000d2e:	e015      	b.n	8000d5c <MRCC_voidEnablePeripheral+0x88>
		case APB1ENR_BUS:   SET_BIT(RCC->APB1ENR , copy_u8Peripheral);   break;
 8000d30:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <MRCC_voidEnablePeripheral+0x94>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d34:	79ba      	ldrb	r2, [r7, #6]
 8000d36:	2101      	movs	r1, #1
 8000d38:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <MRCC_voidEnablePeripheral+0x94>)
 8000d40:	430b      	orrs	r3, r1
 8000d42:	6413      	str	r3, [r2, #64]	; 0x40
 8000d44:	e00a      	b.n	8000d5c <MRCC_voidEnablePeripheral+0x88>
		case APB2ENR_BUS:   SET_BIT(RCC->APB2ENR , copy_u8Peripheral);   break;
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <MRCC_voidEnablePeripheral+0x94>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	79ba      	ldrb	r2, [r7, #6]
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d52:	4611      	mov	r1, r2
 8000d54:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <MRCC_voidEnablePeripheral+0x94>)
 8000d56:	430b      	orrs	r3, r1
 8000d58:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5a:	bf00      	nop
	}
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	40023800 	.word	0x40023800

08000d6c <MSTK_voidInit>:

static void(*MSTK_PF)(void) = NULL;
static u32 globalLoadValue ;
static u8 global_u8periodicityMode;

void MSTK_voidInit(void){
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
#if CLK_SOURCE_CONFIG == PROCCESOR_CLK_AHB
	SET_BIT(STK->CTRL , CLKSOURCE);
#elif CLK_SOURCE_CONFIG == AHB_8
	CLR_BIT(STK->CTRL , CLKSOURCE);
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <MSTK_voidInit+0x1c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <MSTK_voidInit+0x1c>)
 8000d76:	f023 0304 	bic.w	r3, r3, #4
 8000d7a:	6013      	str	r3, [r2, #0]
#endif
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000e010 	.word	0xe000e010

08000d8c <MSTK_voidDelay_ms>:
	local_u32ElapsedTime = STK->LOAD - STK->VAL;
	return local_u32ElapsedTime;
}


void MSTK_voidDelay_ms(u32 copy_u32Delay_ms){
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
#endif
#elif(CLK_SOURCE_CONFIG == AHB_8)
#if(CLK_RCC_SOURCE == HSE)
	STK->LOAD = 3125UL * copy_u32Delay_ms;
#elif(CLK_RCC_SOURCE ==HSI)
	STK->LOAD = 2000UL * copy_u32Delay_ms;
 8000d94:	4a13      	ldr	r2, [pc, #76]	; (8000de4 <MSTK_voidDelay_ms+0x58>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000d9c:	fb01 f303 	mul.w	r3, r1, r3
 8000da0:	6053      	str	r3, [r2, #4]
#endif
#endif
	/*enable the timer*/
	SET_BIT(STK->CTRL , ENABLE);
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <MSTK_voidDelay_ms+0x58>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <MSTK_voidDelay_ms+0x58>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6013      	str	r3, [r2, #0]
	/*wait for the flag*/
	  while(!(GET_BIT(STK->CTRL , COUNTFLAG)));
 8000dae:	bf00      	nop
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MSTK_voidDelay_ms+0x58>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	0c1b      	lsrs	r3, r3, #16
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d0f8      	beq.n	8000db0 <MSTK_voidDelay_ms+0x24>
	/*reset the timer*/
	STK->LOAD = 0;
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MSTK_voidDelay_ms+0x58>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	605a      	str	r2, [r3, #4]
	STK->VAL = 0;
 8000dc4:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <MSTK_voidDelay_ms+0x58>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
	CLR_BIT(STK->CTRL , ENABLE);
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MSTK_voidDelay_ms+0x58>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <MSTK_voidDelay_ms+0x58>)
 8000dd0:	f023 0301 	bic.w	r3, r3, #1
 8000dd4:	6013      	str	r3, [r2, #0]
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e010 	.word	0xe000e010

08000de8 <SysTick_Handler>:
	SET_BIT(STK->CTRL , ENABLE);
}



void SysTick_Handler(void){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
	/*call the function*/
	MSTK_PF();
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <SysTick_Handler+0x50>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4798      	blx	r3
	/*check if one interval*/
	if(global_u8periodicityMode == INTERRUPT_FOR_ONCE) {
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <SysTick_Handler+0x54>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d111      	bne.n	8000e20 <SysTick_Handler+0x38>
		/*reset the timer*/
		STK->LOAD = 0;
 8000dfc:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <SysTick_Handler+0x58>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	605a      	str	r2, [r3, #4]
		STK->VAL = 0;
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <SysTick_Handler+0x58>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
		CLR_BIT(STK->CTRL , ENABLE);
 8000e08:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <SysTick_Handler+0x58>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0c      	ldr	r2, [pc, #48]	; (8000e40 <SysTick_Handler+0x58>)
 8000e0e:	f023 0301 	bic.w	r3, r3, #1
 8000e12:	6013      	str	r3, [r2, #0]
		CLR_BIT(STK->CTRL , TICKINT);
 8000e14:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <SysTick_Handler+0x58>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a09      	ldr	r2, [pc, #36]	; (8000e40 <SysTick_Handler+0x58>)
 8000e1a:	f023 0302 	bic.w	r3, r3, #2
 8000e1e:	6013      	str	r3, [r2, #0]
	}
	 u8 local_u8ClearFlag  = GET_BIT(STK->CTRL , COUNTFLAG);
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <SysTick_Handler+0x58>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	0c1b      	lsrs	r3, r3, #16
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	71fb      	strb	r3, [r7, #7]
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	2000005c 	.word	0x2000005c
 8000e3c:	20000060 	.word	0x20000060
 8000e40:	e000e010 	.word	0xe000e010

08000e44 <main>:
void test_led(void);

void trafficInit(void);


int main(void){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	MRCC_voidInit(MRCC_HSI);
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f7ff fe8d 	bl	8000b68 <MRCC_voidInit>
	MRCC_voidEnablePeripheral(AHB1ENR_BUS , GPIOAEN);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2001      	movs	r0, #1
 8000e52:	f7ff ff3f 	bl	8000cd4 <MRCC_voidEnablePeripheral>
	MRCC_voidEnablePeripheral(APB2ENR_BUS , SYSCFGEN);
 8000e56:	210e      	movs	r1, #14
 8000e58:	2004      	movs	r0, #4
 8000e5a:	f7ff ff3b 	bl	8000cd4 <MRCC_voidEnablePeripheral>

	trafficInit();
 8000e5e:	f000 f817 	bl	8000e90 <trafficInit>

	MSTK_voidInit();
 8000e62:	f7ff ff83 	bl	8000d6c <MSTK_voidInit>

	MNVIC_EnableIRQ(EXTI1_IRQ);
 8000e66:	2007      	movs	r0, #7
 8000e68:	f7ff fe5c 	bl	8000b24 <MNVIC_EnableIRQ>
	MEXTI_u8EXTISetCallBack(EXTI_LINE1,test_led);
 8000e6c:	4907      	ldr	r1, [pc, #28]	; (8000e8c <main+0x48>)
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f7ff fb2e 	bl	80004d0 <MEXTI_u8EXTISetCallBack>
	MEXTI_voidTriggerSelect(EXTI_LINE1 , EXTI_FALLING_EDGE);
 8000e74:	2102      	movs	r1, #2
 8000e76:	2001      	movs	r0, #1
 8000e78:	f7ff f9c4 	bl	8000204 <MEXTI_voidTriggerSelect>
	MEXTI_voidSetEXTIConfig(EXTI_LINE1 , EXTI_PORTA);
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f7ff fa06 	bl	8000290 <MEXTI_voidSetEXTIConfig>
	MEXTI_voidEnableExternalInterrupt(EXTI_LINE1);
 8000e84:	2001      	movs	r0, #1
 8000e86:	f7ff f9a5 	bl	80001d4 <MEXTI_voidEnableExternalInterrupt>

	while(1);
 8000e8a:	e7fe      	b.n	8000e8a <main+0x46>
 8000e8c:	08000ee9 	.word	0x08000ee9

08000e90 <trafficInit>:
	return 0;
}


void trafficInit(void){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	MGPIO_voidSetPinMode(GPIO_PORTA , 0 , GPIO_MODE_OUTPUT);
 8000e94:	2201      	movs	r2, #1
 8000e96:	2100      	movs	r1, #0
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f7ff fba5 	bl	80005e8 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(GPIO_PORTA , 2 , GPIO_MODE_OUTPUT);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2102      	movs	r1, #2
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f7ff fba0 	bl	80005e8 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(GPIO_PORTA , 3 , GPIO_MODE_OUTPUT);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2103      	movs	r1, #3
 8000eac:	2000      	movs	r0, #0
 8000eae:	f7ff fb9b 	bl	80005e8 <MGPIO_voidSetPinMode>

	MGPIO_voidSetPinMode(GPIO_PORTA , 1 , GPIO_MODE_INPUT);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f7ff fb96 	bl	80005e8 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinInputPull(GPIO_PORTA , 1 , GPIO_PULL_UP);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f7ff fcbf 	bl	8000844 <MGPIO_voidSetPinInputPull>

	MGPIO_voidSetPinOutPutType(GPIO_PORTA , 0 , GPIO_PUSH_PULL);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f7ff fc4a 	bl	8000764 <MGPIO_voidSetPinOutPutType>
	MGPIO_voidSetPinOutPutType(GPIO_PORTA , 2 , GPIO_PUSH_PULL);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2102      	movs	r1, #2
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f7ff fc45 	bl	8000764 <MGPIO_voidSetPinOutPutType>
	MGPIO_voidSetPinOutPutType(GPIO_PORTA , 3 , GPIO_PUSH_PULL);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2103      	movs	r1, #3
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f7ff fc40 	bl	8000764 <MGPIO_voidSetPinOutPutType>
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <test_led>:

void test_led(void){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
	while(1){
	MGPIO_voidSetPinValue(GPIO_PORTA,0,1);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f7ff fd64 	bl	80009c0 <MGPIO_voidSetPinValue>
	MSTK_voidDelay_ms(14000);
 8000ef8:	f243 60b0 	movw	r0, #14000	; 0x36b0
 8000efc:	f7ff ff46 	bl	8000d8c <MSTK_voidDelay_ms>
	for(u8 i = 0 ; i < 3 ; i++){
 8000f00:	2300      	movs	r3, #0
 8000f02:	71fb      	strb	r3, [r7, #7]
 8000f04:	e01e      	b.n	8000f44 <test_led+0x5c>
	  MGPIO_voidSetPinValue(GPIO_PORTA,0,0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f7ff fd58 	bl	80009c0 <MGPIO_voidSetPinValue>
	  MGPIO_voidSetPinValue(GPIO_PORTA,2,0);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2102      	movs	r1, #2
 8000f14:	2000      	movs	r0, #0
 8000f16:	f7ff fd53 	bl	80009c0 <MGPIO_voidSetPinValue>
	  MSTK_voidDelay_ms(1000);
 8000f1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f1e:	f7ff ff35 	bl	8000d8c <MSTK_voidDelay_ms>
	  MGPIO_voidSetPinValue(GPIO_PORTA,0,1);
 8000f22:	2201      	movs	r2, #1
 8000f24:	2100      	movs	r1, #0
 8000f26:	2000      	movs	r0, #0
 8000f28:	f7ff fd4a 	bl	80009c0 <MGPIO_voidSetPinValue>
	  MGPIO_voidSetPinValue(GPIO_PORTA,2,1);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2102      	movs	r1, #2
 8000f30:	2000      	movs	r0, #0
 8000f32:	f7ff fd45 	bl	80009c0 <MGPIO_voidSetPinValue>
	  MSTK_voidDelay_ms(1000);
 8000f36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f3a:	f7ff ff27 	bl	8000d8c <MSTK_voidDelay_ms>
	for(u8 i = 0 ; i < 3 ; i++){
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	3301      	adds	r3, #1
 8000f42:	71fb      	strb	r3, [r7, #7]
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d9dd      	bls.n	8000f06 <test_led+0x1e>
	}

	 MGPIO_voidSetPinValue(GPIO_PORTA,0,0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff fd36 	bl	80009c0 <MGPIO_voidSetPinValue>

	 MGPIO_voidSetPinValue(GPIO_PORTA,3,1);
 8000f54:	2201      	movs	r2, #1
 8000f56:	2103      	movs	r1, #3
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f7ff fd31 	bl	80009c0 <MGPIO_voidSetPinValue>
	 MSTK_voidDelay_ms(14000);
 8000f5e:	f243 60b0 	movw	r0, #14000	; 0x36b0
 8000f62:	f7ff ff13 	bl	8000d8c <MSTK_voidDelay_ms>

	 for(u8 i = 0 ; i < 3 ; i++){
 8000f66:	2300      	movs	r3, #0
 8000f68:	71bb      	strb	r3, [r7, #6]
 8000f6a:	e01e      	b.n	8000faa <test_led+0xc2>
	   MGPIO_voidSetPinValue(GPIO_PORTA,3,0);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2103      	movs	r1, #3
 8000f70:	2000      	movs	r0, #0
 8000f72:	f7ff fd25 	bl	80009c0 <MGPIO_voidSetPinValue>
	   MGPIO_voidSetPinValue(GPIO_PORTA,2,0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2102      	movs	r1, #2
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f7ff fd20 	bl	80009c0 <MGPIO_voidSetPinValue>
	   MSTK_voidDelay_ms(1000);
 8000f80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f84:	f7ff ff02 	bl	8000d8c <MSTK_voidDelay_ms>
	   MGPIO_voidSetPinValue(GPIO_PORTA,3,1);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2103      	movs	r1, #3
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f7ff fd17 	bl	80009c0 <MGPIO_voidSetPinValue>
	   MGPIO_voidSetPinValue(GPIO_PORTA,2,1);
 8000f92:	2201      	movs	r2, #1
 8000f94:	2102      	movs	r1, #2
 8000f96:	2000      	movs	r0, #0
 8000f98:	f7ff fd12 	bl	80009c0 <MGPIO_voidSetPinValue>
	   MSTK_voidDelay_ms(1000);
 8000f9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fa0:	f7ff fef4 	bl	8000d8c <MSTK_voidDelay_ms>
	 for(u8 i = 0 ; i < 3 ; i++){
 8000fa4:	79bb      	ldrb	r3, [r7, #6]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	71bb      	strb	r3, [r7, #6]
 8000faa:	79bb      	ldrb	r3, [r7, #6]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d9dd      	bls.n	8000f6c <test_led+0x84>
	 }

	 MGPIO_voidSetPinValue(GPIO_PORTA,3,0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2103      	movs	r1, #3
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f7ff fd03 	bl	80009c0 <MGPIO_voidSetPinValue>
	 MGPIO_voidSetPinValue(GPIO_PORTA,2,0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2102      	movs	r1, #2
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f7ff fcfe 	bl	80009c0 <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(GPIO_PORTA,0,1);
 8000fc4:	e793      	b.n	8000eee <test_led+0x6>

08000fc6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <NMI_Handler+0x4>

08000fcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <HardFault_Handler+0x4>

08000fd2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <MemManage_Handler+0x4>

08000fd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <BusFault_Handler+0x4>

08000fde <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <UsageFault_Handler+0x4>

08000fe4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <SystemInit+0x20>)
 8001016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800101a:	4a05      	ldr	r2, [pc, #20]	; (8001030 <SystemInit+0x20>)
 800101c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001020:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001034:	f8df d034 	ldr.w	sp, [pc, #52]	; 800106c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001038:	480d      	ldr	r0, [pc, #52]	; (8001070 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800103a:	490e      	ldr	r1, [pc, #56]	; (8001074 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800103c:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001040:	e002      	b.n	8001048 <LoopCopyDataInit>

08001042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001046:	3304      	adds	r3, #4

08001048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800104c:	d3f9      	bcc.n	8001042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104e:	4a0b      	ldr	r2, [pc, #44]	; (800107c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001050:	4c0b      	ldr	r4, [pc, #44]	; (8001080 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001054:	e001      	b.n	800105a <LoopFillZerobss>

08001056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001058:	3204      	adds	r2, #4

0800105a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800105c:	d3fb      	bcc.n	8001056 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800105e:	f7ff ffd7 	bl	8001010 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001062:	f000 f811 	bl	8001088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001066:	f7ff feed 	bl	8000e44 <main>
  bx  lr    
 800106a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800106c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001074:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001078:	080010f0 	.word	0x080010f0
  ldr r2, =_sbss
 800107c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001080:	20000064 	.word	0x20000064

08001084 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001084:	e7fe      	b.n	8001084 <ADC_IRQHandler>
	...

08001088 <__libc_init_array>:
 8001088:	b570      	push	{r4, r5, r6, lr}
 800108a:	4d0d      	ldr	r5, [pc, #52]	; (80010c0 <__libc_init_array+0x38>)
 800108c:	4c0d      	ldr	r4, [pc, #52]	; (80010c4 <__libc_init_array+0x3c>)
 800108e:	1b64      	subs	r4, r4, r5
 8001090:	10a4      	asrs	r4, r4, #2
 8001092:	2600      	movs	r6, #0
 8001094:	42a6      	cmp	r6, r4
 8001096:	d109      	bne.n	80010ac <__libc_init_array+0x24>
 8001098:	4d0b      	ldr	r5, [pc, #44]	; (80010c8 <__libc_init_array+0x40>)
 800109a:	4c0c      	ldr	r4, [pc, #48]	; (80010cc <__libc_init_array+0x44>)
 800109c:	f000 f818 	bl	80010d0 <_init>
 80010a0:	1b64      	subs	r4, r4, r5
 80010a2:	10a4      	asrs	r4, r4, #2
 80010a4:	2600      	movs	r6, #0
 80010a6:	42a6      	cmp	r6, r4
 80010a8:	d105      	bne.n	80010b6 <__libc_init_array+0x2e>
 80010aa:	bd70      	pop	{r4, r5, r6, pc}
 80010ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80010b0:	4798      	blx	r3
 80010b2:	3601      	adds	r6, #1
 80010b4:	e7ee      	b.n	8001094 <__libc_init_array+0xc>
 80010b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80010ba:	4798      	blx	r3
 80010bc:	3601      	adds	r6, #1
 80010be:	e7f2      	b.n	80010a6 <__libc_init_array+0x1e>
 80010c0:	080010e8 	.word	0x080010e8
 80010c4:	080010e8 	.word	0x080010e8
 80010c8:	080010e8 	.word	0x080010e8
 80010cc:	080010ec 	.word	0x080010ec

080010d0 <_init>:
 80010d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010d2:	bf00      	nop
 80010d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010d6:	bc08      	pop	{r3}
 80010d8:	469e      	mov	lr, r3
 80010da:	4770      	bx	lr

080010dc <_fini>:
 80010dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010de:	bf00      	nop
 80010e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010e2:	bc08      	pop	{r3}
 80010e4:	469e      	mov	lr, r3
 80010e6:	4770      	bx	lr
